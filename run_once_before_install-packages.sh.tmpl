#!/usr/bin/env bash

# Chezmoi run_once script - installs packages based on system detection
# This runs once before applying dotfiles

set -euo pipefail

echo "🔧 Installing packages for {{ .chezmoi.os }}/{{ .chezmoi.arch }}..."

{{- if .is_macos }}
# macOS package installation
if command -v brew >/dev/null 2>&1; then
    echo "📦 Installing Homebrew packages..."

    # Essential tools (minimal set, most tools managed by Nix)
    brew_packages=(
        # Only install Homebrew packages not available or better via Nix
        # Note: git, fzf, ripgrep, tree, jq, yq, just, gh are in Nix flake
        "reattach-to-user-namespace"  # Required for tmux clipboard integration on macOS
    )

    for package in "${brew_packages[@]}"; do
        if ! brew list "$package" >/dev/null 2>&1; then
            echo "Installing $package..."
            brew install "$package"
        fi
    done

    # NOTE: Nix installation is handled by bootstrap-nix-chezmoi.sh
    # Uncomment below if you want conditional Nix installation after bootstrap
    # if ! command -v nix >/dev/null 2>&1; then
    #     echo "🗄️ Installing Nix package manager..."
    #     sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon
    #
    #     # Enable flakes
    #     mkdir -p ~/.config/nix
    #     echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
    # fi

    echo "🗄️ Most development tools are managed by Nix (see flake.nix)"
    echo "🔄 Essential tools like git, fzf, ripgrep, direnv, just, gh are in the Nix flake"

else
    echo "⚠️ Homebrew not found. Please install it first."
fi

# Install Oh My Zsh if not present
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    echo "🐚 Installing Oh My Zsh..."
    RUNZSH=no CHSH=no sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
    echo "✅ Oh My Zsh already installed"
fi

# Install Powerlevel10k theme
P10K_PATH="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
if [ ! -d "$P10K_PATH" ]; then
    echo "⚡ Installing Powerlevel10k theme..."
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$P10K_PATH"
else
    echo "✅ Powerlevel10k already installed"
fi

# Install zsh-completions plugin to enhance completions
ZSH_COMPLETIONS_PATH="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-completions"
if [ ! -d "$ZSH_COMPLETIONS_PATH" ]; then
    echo "🧠 Installing zsh-completions plugin..."
    git clone https://github.com/zsh-users/zsh-completions "$ZSH_COMPLETIONS_PATH"
else
    echo "✅ zsh-completions already installed"
fi

# Install TPM (Tmux Plugin Manager)
TPM_PATH="$HOME/.config/tmux/plugins/tpm"
if [ ! -d "$TPM_PATH" ]; then
    echo "🔌 Installing TPM (Tmux Plugin Manager)..."
    mkdir -p "$(dirname "$TPM_PATH")"
    git clone https://github.com/tmux-plugins/tpm "$TPM_PATH"
    chmod +x "$TPM_PATH/tpm"
    echo "✅ TPM installed. Run 'tmux' and press 'prefix + I' to install plugins"
else
    echo "✅ TPM already installed"
fi

# Install Catppuccin tmux theme (manual installation - recommended)
CATPPUCCIN_PATH="$HOME/.config/tmux/plugins/catppuccin"
if [ ! -d "$CATPPUCCIN_PATH/tmux" ]; then
    echo "🎨 Installing Catppuccin tmux theme..."
    mkdir -p "$CATPPUCCIN_PATH"
    git clone -b v2.1.3 https://github.com/catppuccin/tmux.git "$CATPPUCCIN_PATH/tmux"
    echo "✅ Catppuccin tmux theme installed"
else
    echo "✅ Catppuccin tmux theme already installed"
fi

# Install Cyberdream theme for Catppuccin (copy from nvim plugin if available)
CYBERDREAM_THEME="$CATPPUCCIN_PATH/tmux/themes/catppuccin_cyberdream_tmux.conf"
if [ ! -f "$CYBERDREAM_THEME" ]; then
    echo "🌊 Installing Cyberdream theme..."

    # Try to copy from nvim plugin first (if available)
    CYBERDREAM_NVIM_PATH="$HOME/.local/share/nvim/lazy/cyberdream.nvim/extras/tmux/cyberdream.conf"
    if [ -f "$CYBERDREAM_NVIM_PATH" ]; then
        cp "$CYBERDREAM_NVIM_PATH" "$CYBERDREAM_THEME"
        echo "✅ Cyberdream theme copied from nvim plugin"
    else
        # Fallback to curl if nvim plugin not available
        curl -fsSL https://raw.githubusercontent.com/scottmckendry/cyberdream.nvim/main/extras/tmux/cyberdream.conf -o "$CYBERDREAM_THEME" || {
            echo "⚠️ Failed to download cyberdream theme, will be installed later"
        }
    fi
else
    echo "✅ Cyberdream theme already installed"
fi

{{- else if .is_linux }}
# Linux package installation
if command -v apt >/dev/null 2>&1; then
    echo "📦 Installing packages with apt..."

    # Update package list
    sudo apt update

    # Essential tools (minimal set, most tools managed by Nix)
    apt_packages=(
        # Only essential system packages, dev tools are in Nix
        "curl"
        "wget"
    )

    for package in "${apt_packages[@]}"; do
        if ! dpkg -l "$package" >/dev/null 2>&1; then
            echo "Installing $package..."
            sudo apt install -y "$package"
        fi
    done

    # NOTE: Nix installation is handled by bootstrap-nix-chezmoi.sh
    # Uncomment below if you want conditional Nix installation after bootstrap
    # if ! command -v nix >/dev/null 2>&1; then
    #     echo "🗄️ Installing Nix package manager..."
    #     sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --daemon
    #
    #     # Enable flakes
    #     mkdir -p ~/.config/nix
    #     echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
    # fi

elif command -v dnf >/dev/null 2>&1; then
    echo "📦 Installing packages with dnf..."

    # Fedora/RHEL packages (minimal set, most tools managed by Nix)
    dnf_packages=(
        # Only essential system packages, dev tools are in Nix
        "curl"
        "wget"
    )

    for package in "${dnf_packages[@]}"; do
        if ! rpm -q "$package" >/dev/null 2>&1; then
            echo "Installing $package..."
            sudo dnf install -y "$package"
        fi
    done

elif command -v pacman >/dev/null 2>&1; then
    echo "📦 Installing packages with pacman..."

    # Arch packages (minimal set, most tools managed by Nix)
    pacman_packages=(
        # Only essential system packages, dev tools are in Nix
        "curl"
        "wget"
    )

    for package in "${pacman_packages[@]}"; do
        if ! pacman -Q "$package" >/dev/null 2>&1; then
            echo "Installing $package..."
            sudo pacman -S --noconfirm "$package"
        fi
    done

else
    echo "⚠️ No supported package manager found"
fi
{{- end }}

# Note: Using Nix for package management - no fallback version manager needed

echo "✅ Package installation completed!"
